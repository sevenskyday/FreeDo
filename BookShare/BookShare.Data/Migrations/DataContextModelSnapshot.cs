// <auto-generated />
using System;
using BookShare.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookShare.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BookShare.Data.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AminId");

                    b.Property<string>("Author");

                    b.Property<string>("CoverImage");

                    b.Property<DateTime>("CreateDT");

                    b.Property<bool>("Delete");

                    b.Property<int>("GenreId");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<decimal>("Price");

                    b.Property<DateTime>("PublisDT");

                    b.Property<string>("Publish");

                    b.Property<decimal>("RealPrice");

                    b.Property<int>("State");

                    b.Property<string>("SubName");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdateDT");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("BookShare.Data.Book_Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Book_Id");

                    b.Property<int?>("Book_VolumId");

                    b.Property<string>("Title");

                    b.Property<int>("Volum_Id");

                    b.HasKey("Id");

                    b.HasIndex("Book_VolumId");

                    b.ToTable("Book_Chapters");
                });

            modelBuilder.Entity("BookShare.Data.Book_Paragraph", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Book_ChapterId");

                    b.Property<int>("Book_Id");

                    b.Property<int>("Chapter_Id");

                    b.Property<string>("Content");

                    b.Property<int>("Type");

                    b.Property<int>("Volum_Id");

                    b.HasKey("Id");

                    b.HasIndex("Book_ChapterId");

                    b.ToTable("Book_Paragraphs");
                });

            modelBuilder.Entity("BookShare.Data.Book_Relation_Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookId");

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.ToTable("Book_Relation_Tags");
                });

            modelBuilder.Entity("BookShare.Data.Book_Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Delete");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Book_Tags");
                });

            modelBuilder.Entity("BookShare.Data.Book_Volum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Article");

                    b.Property<int>("BookId");

                    b.Property<string>("Genre");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Title");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Book_Volums");
                });

            modelBuilder.Entity("BookShare.Data.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Delete");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("BookShare.Data.ToDoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDone");

                    b.Property<string>("Name");

                    b.Property<int>("Priority");

                    b.HasKey("Id");

                    b.ToTable("ToDo");
                });

            modelBuilder.Entity("BookShare.Data.Book", b =>
                {
                    b.HasOne("BookShare.Data.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookShare.Data.Book_Chapter", b =>
                {
                    b.HasOne("BookShare.Data.Book_Volum", "Book_Volum")
                        .WithMany("book_Chapters")
                        .HasForeignKey("Book_VolumId");
                });

            modelBuilder.Entity("BookShare.Data.Book_Paragraph", b =>
                {
                    b.HasOne("BookShare.Data.Book_Chapter", "Book_Chapter")
                        .WithMany("Book_Paragraphs")
                        .HasForeignKey("Book_ChapterId");
                });

            modelBuilder.Entity("BookShare.Data.Book_Volum", b =>
                {
                    b.HasOne("BookShare.Data.Book", "Book")
                        .WithMany("Book_Volums")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
